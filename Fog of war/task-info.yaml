type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: "package battleship;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\
    \npublic class Main {\n\t\n\t\n\tpublic static String[][] initialiser(){\n\t\t\
    String [][] player1=new String[11][11];\n        player1[0][0]=\" \";\n      \
    \  for(int i=1;i<11;i++) player1[0][i]=String.valueOf(i);\n        int ascii=65;\n\
    \        for(int i=1;i<11;i++) {\n        \tplayer1[i][0]=Character.toString((char)ascii);\n\
    \        \tascii++;\n        }\n        for(int i=1;i<11;i++) {\n        \tfor(int\
    \ j=1;j<11;j++) {\n        \t\tplayer1[i][j]=\"~\";\n        \t}\n        }\n\
    \        \n        return player1;\n\t}\n\t\n\t\n\t\n\tpublic static  void afficher(String[][]\
    \ boat)\n\t{\n\t\tfor(int i=0;i<11;i++) {\n        \tfor(int j=0;j<11;j++) {\n\
    \        \t\tSystem.out.print(boat[i][j]+\" \");\n        \t}\n        \tSystem.out.println();\n\
    \        }\n\t}\n\tpublic static boolean verification(String[][] boat,int row,int\
    \ col){\n\t\tif(row==1) {\n\t\t\tif(col==1) {\n\t\t\t\tif(boat[row][col]==\"~\"\
    && boat[row+1][col]==\"~\" &&  boat[row][col+1]==\"~\"){\n\t\t\t\t\treturn true;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(col==10) {\n\t\t\t\tif(boat[row][col]==\"~\"&& boat[row+1][col]==\"\
    ~\" &&  boat[row][col-1]==\"~\"){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tif(boat[row][col]==\"~\"&& boat[row+1][col]==\"~\" && boat[row][col-1]==\"\
    ~\" && boat[row][col+1]==\"~\"){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t\telse if(row==10) {\n\t\t\tif(col==1) {\n\t\t\t\tif(boat[row][col]==\"\
    ~\"&& boat[row-1][col]==\"~\" &&  boat[row][col+1]==\"~\"){\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(col==10) {\n\t\t\t\tif(boat[row][col]==\"\
    ~\"&& boat[row-1][col]==\"~\" &&  boat[row][col-1]==\"~\"){\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(boat[row][col]==\"~\"&&\
    \ boat[row-1][col]==\"~\" && boat[row-1][col]==\"~\" && boat[row][col+1]==\"~\"\
    ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(col==1){\n\t\
    \t\tif(boat[row][col]==\"~\"&& boat[row-1][col]==\"~\" && boat[row+1][col]==\"\
    ~\" && boat[row][col+1]==\"~\"){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(col==10){\n\t\t\tif(boat[row][col]==\"~\"&& boat[row-1][col]==\"~\" && boat[row+1][col]==\"\
    ~\" && boat[row][col-1]==\"~\"){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\
    \t\t\tif(boat[row][col]==\"~\"&& boat[row-1][col]==\"~\" && boat[row+1][col]==\"\
    ~\" && boat[row][col-1]==\"~\"&& boat[row][col+1]==\"~\"){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic static boolean verifierCord(String[][]\
    \ boat,String cord1,String cord2){\n\t\tint r1 = (int) cord1.charAt(0)-64;\n\t\
    \tint r2 = (int) cord2.charAt(0)-64;\n\t\tint col1=Integer. parseInt(cord1.substring(1));\n\
    \t\tint col2=Integer. parseInt(cord2.substring(1));\n\t\tif(r1<r2) {\n\t\t\tfor(int\
    \ i=r1;i<=r2;i++){\n\t\t\t\tif(!verification(boat,i,col1)) {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(r1>r2) {\n\t\t\tfor(int i=r2;i<=r1;i++){\n\
    \t\t\t\tif(!verification(boat,i,col1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(col1<col2) {\n\t\t\t\tfor(int i=col1;i<=col2;i++){\n\
    \t\t\t\t\tif(!verification(boat,r1,i)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(col1>col2) {\n\t\t\t\tfor(int i=col2;i<=col1;i++){\n\
    \t\t\t\t\tif(!verification(boat,r1,i)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic static String[][]\
    \ modifier(String[][] boat ,String cord1,String cord2){\n\t\tint r1 = (int) cord1.charAt(0)-64;\n\
    \t\tint r2 = (int) cord2.charAt(0)-64;\n\t\tint col1=Integer. parseInt(cord1.substring(1));\n\
    \t\tint col2=Integer. parseInt(cord2.substring(1));\n\t\tif(r1<r2) {\n\t\t\tfor(int\
    \ i=r1;i<=r2;i++){\n\t\t\t\tboat[i][col1]=\"O\";\n\t\t\t}\n\t\t}\n\t\telse if(r1>r2)\
    \ {\n\t\t\tfor(int i=r2;i<=r1;i++){\n\t\t\t\tboat[i][col1]=\"O\";\n\t\t\t}\n\t\
    \t}\n\t\telse {\n\t\t\tif(col1<col2) {\n\t\t\t\tfor(int i=col1;i<=col2;i++){\n\
    \t\t\t\t\tboat[r1][i]=\"O\";\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(col1>col2) {\n\t\t\
    \t\tfor(int i=col2;i<=col1;i++){\n\t\t\t\t\tboat[r1][i]=\"O\";\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t\treturn boat;\n\t}\n\t\n\t\n\tpublic static void main(String[]\
    \ args) {\n        \n\t\tString [][] player1=initialiser();\t\t\n\t\tint test=0;\n\
    \t\tint[] boatsSize= {5,4,3,3,2};\n\t\tString[] boatsName= {\"Aircraft Carrier\"\
    ,\"Battleship\",\"Submarine\",\"Cruiser\",\"Destroyer\"};\n\t\tafficher(player1);\n\
    \t\twhile(test!=5)\n\t\t{\n\t\t\t\n\t\t\tSystem.out.printf(\"\\nEnter the coordinates\
    \ of the %s (%d cells):\\n\",boatsName[test],boatsSize[test]);\n\t\t\tboolean\
    \ isGood=false;\n\t\t\t//do while\n\t\t\tdo {\n\t\t\t\tScanner scanner=new Scanner(System.in);\n\
    \t\t\t\tString cord1=scanner.next();\n\t\t\t\tString cord2=scanner.next();\n\t\
    \t\t\tint r1 = (int) cord1.charAt(0)-64;\n\t\t\t\tint r2 = (int) cord2.charAt(0)-64;\n\
    \t\t\t\tint distance1=Math.abs(r1-r2);\n\t\t\t\tint col1=Integer. parseInt(cord1.substring(1));\n\
    \t\t\t\tint col2=Integer. parseInt(cord2.substring(1));\n\t\t\t\t//verif row\n\
    \t\t\t\tif(distance1==0) {\n\t\t\t\t\t//verif col\n\t\t\t\t\tif(Math.abs(col1-col2)+1==boatsSize[test]){\n\
    \t\t\t\t\t\tif(verifierCord(player1,cord1,cord2)){\n\t\t\t\t\t\t\tplayer1=modifier(player1,cord1,cord2);\n\
    \t\t\t\t\t\t\tisGood=true;\n\t\t\t\t\t\t\ttest++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\
    else {\n\t\t\t\t\t\t\tSystem.out.println(\"Error! You placed it too close to another\
    \ one. Try again:\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\
    \tSystem.out.println(\"Error! Wrong length of the Submarine! Try again:\");\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//verif row\n\t\t\t\telse if(distance1+1==boatsSize[test])\
    \ {\n\t\t\t\t\t//verif col\n\t\t\t\t\tif(Math.abs(col1-col2)==0){\n\t\t\t\t\t\t\
    if(verifierCord(player1,cord1,cord2)){\n\t\t\t\t\t\t\tplayer1=modifier(player1,cord1,cord2);\n\
    \t\t\t\t\t\t\tisGood=true;\n\t\t\t\t\t\t\ttest++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\
    else {\n\t\t\t\t\t\t\tSystem.out.println(\"Error! You placed it too close to another\
    \ one. Try again:\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\
    \tSystem.out.println(\"Error! Wrong length of the Submarine! Try again:\");\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(\"Error! Wrong\
    \ ship location! Try again:\\n\");\n\t\t\t\t}\n\t\t\t\t//fin do while\n\t\t\t\
    }while(!isGood);\n\t\t\tafficher(player1);\n\t\t}\n    }\n\t\n}\n"
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Field.java
  visible: true
  text: |+
    package battleship;

    public class Field {
        private String[][] field;
        private Ship[] bateaux=new Ship[5];
        public Field() {
            this.field = new String[11][11];
            this.bateaux[0]=new Ship("Aircraft Carrier",5);
            this.bateaux[1]=new Ship("Battleship",4);
            this.bateaux[2]=new Ship("Submarine",3);
            this.bateaux[3]=new Ship("Cruiser",3);
            this.bateaux[4]=new Ship("Destroyer",2);
        }

        public String[][] getField() {
            return field;
        }
        public void setField(String[][] field) {
            this.field = field;
        }

        public void initialiser(){
            field[0][0]=" ";
            int ascii=65;
            for(int i=1;i<11;i++) {
                field[0][i]=String.valueOf(i);
                field[i][0]=Character.toString((char)ascii);
                ascii++;
                for(int j=1;j<11;j++) {
                    field[i][j]="~";
                }
            }
        }

        public void afficher(){
            for(int i=0;i<11;i++){
                for(int j=0;j<11;j++){
                    System.out.print(field[i][j]+" ");
                }
                System.out.println();
            }
        }

        public boolean verifDistance(int r1,int col1,int r2,int col2,int size){
            if(r1-r2==0){
                if(Math.abs(col1-col2)+1==size){
                    return true;
                }
            }
            else if(Math.abs(r1-r2)+1==size){
                if(col1-col2==0){
                    return true;
                }
            }
            return false;
        }

        public boolean verifierEntourage(int row,int col){
            if(row==1) {
                if(col==1) {
                    if(field[row][col]=="~"&& field[row+1][col]=="~" &&  field[row][col+1]=="~"){
                        return true;
                    }
                }
                if(col==10) {
                    if(field[row][col]=="~"&& field[row+1][col]=="~" &&  field[row][col-1]=="~"){
                        return true;
                    }
                }
                else {
                    if(field[row][col]=="~"&& field[row+1][col]=="~" && field[row][col-1]=="~" && field[row][col+1]=="~"){
                        return true;
                    }
                }
            }
            else if(row==10) {
                if(col==1) {
                    if(field[row][col]=="~"&& field[row-1][col]=="~" &&  field[row][col+1]=="~"){
                        return true;
                    }
                }
                if(col==10) {
                    if(field[row][col]=="~"&& field[row-1][col]=="~" &&  field[row][col-1]=="~"){
                        return true;
                    }
                }
                else {
                    if(field[row][col]=="~"&& field[row-1][col]=="~" && field[row-1][col]=="~" && field[row][col+1]=="~"){
                        return true;
                    }
                }
            }
            else if(col==1){
                if(field[row][col]=="~"&& field[row-1][col]=="~" && field[row+1][col]=="~" && field[row][col+1]=="~"){
                    return true;
                }
            }
            else if(col==10){
                if(field[row][col]=="~"&& field[row-1][col]=="~" && field[row+1][col]=="~" && field[row][col-1]=="~"){
                    return true;
                }
            }
            else{
                if(field[row][col]=="~"&& field[row-1][col]=="~" && field[row+1][col]=="~" && field[row][col-1]=="~"&& field[row][col+1]=="~"){
                    return true;
                }
            }
            return false;
        }

        public boolean verifierValidite(int r1,int col1,int r2,int col2){
            if(r1!=r2){
                for(int i=Math.min(r1,r2);i<=Math.max(r1,r2);i++){
                    if(!verifierEntourage(i,col1)){
                        return false;
                    }
                }
            }
            else{
                for(int i=Math.min(col1,col2);i<=Math.max(col1,col2);i++){
                    if(!verifierEntourage(r1,i)){
                        return false;
                    }
                }
            }
            return true;
        }
        public boolean testerCord(String cord1,String cord2,int i){
            int r1 = (int) cord1.charAt(0)-64;
            int r2 = (int) cord2.charAt(0)-64;
            int col1=Integer. parseInt(cord1.substring(1));
            int col2=Integer. parseInt(cord2.substring(1));
            if(verifDistance(r1,col1,r2,col2,bateaux[i].getSize())){
                if(verifierValidite(r1,col1,r2,col2)){
                    return true;
                }
            }
            return false;
        }

        public void modifier(String cord1,String cord2){
            int r1 = (int) cord1.charAt(0)-64;
            int r2 = (int) cord2.charAt(0)-64;
            int col1=Integer. parseInt(cord1.substring(1));
            int col2=Integer. parseInt(cord2.substring(1));
            if(r1!=r2){
                for(int i=Math.min(r1,r2);i<=Math.max(r1,r2);i++){
                    field[i][col1]="O";
                }
            }
            else{
                for(int i=Math.min(col1,col2);i<=Math.max(col1,col2);i++){
                    field[r1][i]="O";
                }
            }
        }

        public Ship[] getBateaux() {
            return bateaux;
        }

        public boolean testerSyntaxe(String cord){
            int r = (int) cord.charAt(0);
            int col=Integer. parseInt(cord.substring(1));
            return !(r<65 || r>70 || col>10 || col<1);
        }
        public void attack(String cord){
            int r = (int) cord.charAt(0)-64;
            int col=Integer. parseInt(cord.substring(1));
            if(field[r][col]=="O"){
                field[r][col]="X";
                this.afficher();
                System.out.println("\nYou hit a ship!\n");
            }
            else{
                field[r][col]="M";
                this.afficher();
                System.out.println("\nYou missed!\n");
            }
        }
    }

  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private String name;
        private int size;

        public Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10596#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 08 Jan 2023 00:01:01 UTC"
record: 3
